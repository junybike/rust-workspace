7.1
Crate: smallest amount of code that Rust compiler considers at a time
Two forms of crates: binary, library
Crate root: source file that Rust compiler starts from and makes up the root module of crate

Package: bundle of one or more crates that provides a set of functionality
 - contains a cargo.toml
Cargo = package that contains the binary crate for library crate that the binary crate depends on
src/main.rs: a binary crate
src/lib.rs: a library crate

7.2
Compiling a crate
1. compiler first look at crate root (src/lib.rs, src/main.rs) for code to compiler
2. in crate root file, declare new module: mod garden;
3. declare submodule mod vegetables; in src/garden.rs
4. Once module is part of the crate, can refer to code in that module from anywhere else in that same crate
 - accessing Asparagus type in garden vegetables module: crate::garden::vegetables::Asparagus
5. to make public module, use pub mod instead of mod
6. use shortcut: "use crate::garden::vegetables::Asparagus"

7.3
absolute path: full path starting from a crate root
relative path: starts from current module and uses self or super or an identifier in the current module
both absolute and relative paths are followed by identifiers separated by double colons

In Rust, all items (functions, method, struct, enum, modules, constants) are private to parent modules by default.
 - items in parent modules cannot use private items inside child modules
 - items in child modules can use items in their ancestor modules

7.4

7.5
only need to load a file using a mod declaration once in module tree.
Once compiler knows file is part of the project, 
other files in project should refer to the loaded file's code using a path to where it was declared
