19.1
Unsafe superpowers
- dereference a raw pointer
- call an unsafe function/method
- access or modify mutable static variable
- implement unsafe trait
- access fields of union

Raw pointer
- can ignore borrowing rules by having both immutable and mutable pointers 
or multiple mutable pointers to the same location
- not guranteed to point to valid memory
- allowed to be null
- doesnt implement any automatic cleanup

Can create mutable and immutable pointer to same location and change data through mutable pointer

Unsafe function/method: only allowed to get called in unsafe scope
Wrappig unsafe code in a safe function is a common abstraction

FFI (foreign function interface): enables a different programming language to call those functions
- must be called in unsafe scope

Static variables: only store references with static lifetime
- rust can figure out the lifetime. no need to annotate it explicitly
- accessing immutable static variable is safe
- have fixed address in memory
- can be mutable
- accessing and modifying mutable static variable is unsafe
Constants: allowed to duplicate data whenever they're used

Unsafe trait: when at least one of its methods has some invariants that compiler can't verify
unsafe impl: promises that we will uphold the invariants that compiler cant verify

19.2
Associated types: connect a type placeholder with a trait 
such that trait method definitions can use these placeholder types in their signature

Implementor of a trait will specify concrete type to be used instead of placeholder type for particular implementation
- able to define trait that uses some types without knowing exactly what those types are until trait is implemented

Cannot create own operators or overload arbitrary operators
Can overload operation and corresponding traits listed in std::ops by implementing traits associated with operator

Orphan rule: only allowed to implement a trait on a type if either trait or type are local to our crate
- can get around with newtype pattern (new type in a tuple struct)
- tuple contains one field and be a thin wrapper around the type we want to implement a trait for

19.3
Newtype pattern
- statically enforcing that values are never confused and indicating the units of a values
- can abstract away some implementation details of a type
- can hide internal implementation

Type aliases: to give an existing type another name

Never type: !
- empty type
- never returns (diverging functions)
- continue has a ! value
- print!, loop, panic!

Dynamically sized types (DST or unsized types)
- size can be known only at runtime
- str type

To work with DST, Rust provides Sized trait to determine if type's size is known at compile time

19.4
fn is a type rather than a trait
function pointers implement these closure trait: Fn, FnMut, FnOnce
- can always pass a function pointer as argument for function that expects a closure
- best to write functions using generic type and a closure trait, so ur function can accept either functions or closures

Returning closures
Closures are represented by traits. Cannot return closures directly
- use concrete type that implements the trait as return value of the function
- closures dont have a concrete type that is returnable
- not allowed to use function pointer fn as a return type

19.5
macro: refers to a family or features in Rust: declarative macros with macro rules! and 3 kinds of procedural macros

procedural macros:
Custom #[derive]: macros that specify code added with derive attribute used on structs and enums
Attribute-like macros that define custom attributes usable on any item
Function-like macros that look like function calls but operate on tokens specified as their arguments

Function signature: must declare the number and type of parameters the function has.
Macro: can take variable number of parameters (println!)

Macro acts similar to match

procedural macro accept some code as an input, operator on that code, produce some code as an output
 - no matching the patterns and replacing code with other code 

New crates: proc_macro, syn, quote
- proc_macro: allow us to read and manipulate rust code from our code
- syn: parses Rust code from string into a data structure that we can perform operations on
- quote: turns syn data structure back into Rust code

hello_macro_derive: 
1. converts input from TokenStream to data structure so we can interpret and perform operations on. (syn)
2. parse function in syn takes TokenStream and returns DeriveInput struct (parsed rust code)

Attribute like macros: similar to custom derive macros
- allow u to create new attributes

Derive: only works for structs and enums.
Attribute: can be applied to other items (functions)

function like macros: define macros that look like function calls
- more flexible than functions: can take unknown number of arguments